<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/INSTRUCOES_REMOCAO.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/INSTRUCOES_REMOCAO.txt" />
              <option name="updatedContent" value="// ARQUIVO PARA REMOÇÃO MANUAL&#10;// &#10;// REMOVA ESTES ARQUIVOS que não fazem parte do modelo Factory Method simples:&#10;//&#10;// 1. ExemploUsoPatroes.java&#10;// 2. ProcessadorInvalidoException.java  &#10;// 3. ProcessadorInexistenteException.java&#10;// 4. ProcessadorDadosYAML.java&#10;// 5. ProcessadorDadosCreatorTest.java (testa classes que não existem no modelo)&#10;//&#10;// MANTENHA APENAS:&#10;// - IProcessadorDados.java (como IServico)&#10;// - ProcessadorDadosFactory.java (como ServicoFactory)  &#10;// - ProcessadorDadosJSON.java (como ServicoFormatura)&#10;// - ProcessadorDadosXML.java (como ServicoMatricula)&#10;// - ProcessadorDadosCSV.java (como ServicoTrancamento)&#10;// - ProcessadorDadosTXT.java (implementa interface - válido)&#10;// &#10;// PASTA creator/ DEVE SER REMOVIDA COMPLETAMENTE&#10;// (O modelo não tem creators separados)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/REMOVER_ExemploUsoPatroes.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/REMOVER_ExemploUsoPatroes.txt" />
              <option name="updatedContent" value="// REMOVER ESTE ARQUIVO - Não faz parte do modelo simples Factory Method" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/padroescriacao/factorymethod/ProcessadorDadosTXT.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/padroescriacao/factorymethod/ProcessadorDadosTXT.java" />
              <option name="originalContent" value="package padroescriacao.factorymethod;&#10;&#10;// Processador concreto para dados TXT&#10;public class ProcessadorDadosTXT implements IProcessadorDados {&#10;&#10;    public String executar() {&#10;        return &quot;Processamento TXT efetivado&quot;;&#10;    }&#10;&#10;    public String cancelar() {&#10;        return &quot;Processamento TXT cancelado&quot;;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package padroescriacao.factorymethod;&#13;&#10;&#13;&#10;// Processador concreto para dados TXT - não implementa interface para teste de &quot;inválido&quot;&#13;&#10;public class ProcessadorDadosTXT {&#13;&#10;&#13;&#10;    public String executar() {&#13;&#10;        return &quot;Processamento TXT efetivado&quot;;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String cancelar() {&#13;&#10;        return &quot;Processamento TXT cancelado&quot;;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/padroescriacao/factorymethod/ProcessadorDadosFactoryTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/padroescriacao/factorymethod/ProcessadorDadosFactoryTest.java" />
              <option name="originalContent" value="package padroescriacao.factorymethod;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.DisplayName;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class ProcessadorDadosFactoryTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve criar processador JSON válido&quot;)&#10;    void deveCriarProcessadorJSONValido() {&#10;        IProcessadorDados processador = ProcessadorDadosFactory.obterProcessador(&quot;JSON&quot;);&#10;        assertNotNull(processador);&#10;        assertInstanceOf(ProcessadorDadosJSON.class, processador);&#10;        assertEquals(&quot;Processamento JSON efetivado&quot;, processador.executar());&#10;        assertEquals(&quot;Processamento JSON cancelado&quot;, processador.cancelar());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve criar processador XML válido&quot;)&#10;    void deveCriarProcessadorXMLValido() {&#10;        IProcessadorDados processador = ProcessadorDadosFactory.obterProcessador(&quot;XML&quot;);&#10;        assertNotNull(processador);&#10;        assertInstanceOf(ProcessadorDadosXML.class, processador);&#10;        assertEquals(&quot;Processamento XML efetivado&quot;, processador.executar());&#10;        assertEquals(&quot;Processamento XML cancelado&quot;, processador.cancelar());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve criar processador CSV válido&quot;)&#10;    void deveCriarProcessadorCSVValido() {&#10;        IProcessadorDados processador = ProcessadorDadosFactory.obterProcessador(&quot;CSV&quot;);&#10;        assertNotNull(processador);&#10;        assertInstanceOf(ProcessadorDadosCSV.class, processador);&#10;        assertEquals(&quot;Processamento CSV efetivado&quot;, processador.executar());&#10;        assertEquals(&quot;Processamento CSV cancelado&quot;, processador.cancelar());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve criar processador TXT válido&quot;)&#10;    void deveCriarProcessadorTXTValido() {&#10;        IProcessadorDados processador = ProcessadorDadosFactory.obterProcessador(&quot;TXT&quot;);&#10;        assertNotNull(processador);&#10;        assertInstanceOf(ProcessadorDadosTXT.class, processador);&#10;        assertEquals(&quot;Processamento TXT efetivado&quot;, processador.executar());&#10;        assertEquals(&quot;Processamento TXT cancelado&quot;, processador.cancelar());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve retornar exceção para processador inexistente&quot;)&#10;    void deveRetornarExcecaoParaProcessadorInexistente() {&#10;        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -&gt;&#10;            ProcessadorDadosFactory.obterProcessador(&quot;PDF&quot;));&#10;        assertEquals(&quot;Processador inexistente&quot;, exception.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve retornar exceção para processador inválido&quot;)&#10;    void deveRetornarExcecaoParaProcessadorInvalido() {&#10;        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -&gt;&#10;            ProcessadorDadosFactory.obterProcessador(&quot;YAML&quot;));&#10;        assertEquals(&quot;Processador inválido&quot;, exception.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve retornar exceção para entrada nula&quot;)&#10;    void deveRetornarExcecaoParaEntradaNula() {&#10;        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -&gt;&#10;            ProcessadorDadosFactory.obterProcessador(null));&#10;        assertEquals(&quot;Processador inexistente&quot;, exception.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve retornar exceção para entrada vazia&quot;)&#10;    void deveRetornarExcecaoParaEntradaVazia() {&#10;        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -&gt;&#10;            ProcessadorDadosFactory.obterProcessador(&quot;&quot;));&#10;        assertEquals(&quot;Processador inexistente&quot;, exception.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve validar polimorfismo via interface&quot;)&#10;    void deveValidarPolimorfismoViaInterface() {&#10;        String[] tipos = {&quot;JSON&quot;, &quot;XML&quot;, &quot;CSV&quot;, &quot;TXT&quot;};&#10;&#10;        for (String tipo : tipos) {&#10;            IProcessadorDados processador = ProcessadorDadosFactory.obterProcessador(tipo);&#10;&#10;            // Todos devem implementar a interface&#10;            assertInstanceOf(IProcessadorDados.class, processador);&#10;&#10;            // Todos devem ter comportamento polimórfico&#10;            assertNotNull(processador.executar());&#10;            assertNotNull(processador.cancelar());&#10;            assertTrue(processador.executar().contains(&quot;efetivado&quot;));&#10;            assertTrue(processador.cancelar().contains(&quot;cancelado&quot;));&#10;        }&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve criar instâncias independentes&quot;)&#10;    void deveCriarInstanciasIndependentes() {&#10;        IProcessadorDados json1 = ProcessadorDadosFactory.obterProcessador(&quot;JSON&quot;);&#10;        IProcessadorDados json2 = ProcessadorDadosFactory.obterProcessador(&quot;JSON&quot;);&#10;&#10;        assertNotSame(json1, json2, &quot;Factory deve criar instâncias independentes&quot;);&#10;        assertEquals(json1.getClass(), json2.getClass());&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package padroescriacao.factorymethod;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.DisplayName;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;// Testes para ProcessadorDadosFactory seguindo exatamente o modelo dos serviços&#10;class ProcessadorDadosFactoryTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve criar processador JSON válido&quot;)&#10;    void deveCriarProcessadorJSONValido() {&#10;        IProcessadorDados processador = ProcessadorDadosFactory.obterProcessador(&quot;JSON&quot;);&#10;        assertNotNull(processador);&#10;        assertInstanceOf(ProcessadorDadosJSON.class, processador);&#10;        assertEquals(&quot;Processamento JSON efetivado&quot;, processador.executar());&#10;        assertEquals(&quot;Processamento JSON cancelado&quot;, processador.cancelar());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve criar processador XML válido&quot;)&#10;    void deveCriarProcessadorXMLValido() {&#10;        IProcessadorDados processador = ProcessadorDadosFactory.obterProcessador(&quot;XML&quot;);&#10;        assertNotNull(processador);&#10;        assertInstanceOf(ProcessadorDadosXML.class, processador);&#10;        assertEquals(&quot;Processamento XML efetivado&quot;, processador.executar());&#10;        assertEquals(&quot;Processamento XML cancelado&quot;, processador.cancelar());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve criar processador CSV válido&quot;)&#10;    void deveCriarProcessadorCSVValido() {&#10;        IProcessadorDados processador = ProcessadorDadosFactory.obterProcessador(&quot;CSV&quot;);&#10;        assertNotNull(processador);&#10;        assertInstanceOf(ProcessadorDadosCSV.class, processador);&#10;        assertEquals(&quot;Processamento CSV efetivado&quot;, processador.executar());&#10;        assertEquals(&quot;Processamento CSV cancelado&quot;, processador.cancelar());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve retornar exceção para processador inexistente&quot;)&#10;    void deveRetornarExcecaoParaProcessadorInexistente() {&#10;        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -&gt; &#10;            ProcessadorDadosFactory.obterProcessador(&quot;PDF&quot;));&#10;        assertEquals(&quot;Processador inexistente&quot;, exception.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve retornar exceção para processador inválido&quot;)&#10;    void deveRetornarExcecaoParaProcessadorInvalido() {&#10;        // TXT não implementa interface, igual ServicoJubilamento no modelo&#10;        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -&gt; &#10;            ProcessadorDadosFactory.obterProcessador(&quot;TXT&quot;));&#10;        assertEquals(&quot;Processador inválido&quot;, exception.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve retornar exceção para entrada nula&quot;)&#10;    void deveRetornarExcecaoParaEntradaNula() {&#10;        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -&gt; &#10;            ProcessadorDadosFactory.obterProcessador(null));&#10;        assertEquals(&quot;Processador inexistente&quot;, exception.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve retornar exceção para entrada vazia&quot;)&#10;    void deveRetornarExcecaoParaEntradaVazia() {&#10;        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -&gt; &#10;            ProcessadorDadosFactory.obterProcessador(&quot;&quot;));&#10;        assertEquals(&quot;Processador inexistente&quot;, exception.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve validar polimorfismo via interface&quot;)&#10;    void deveValidarPolimorfismoViaInterface() {&#10;        String[] tipos = {&quot;JSON&quot;, &quot;XML&quot;, &quot;CSV&quot;};&#10;        &#10;        for (String tipo : tipos) {&#10;            IProcessadorDados processador = ProcessadorDadosFactory.obterProcessador(tipo);&#10;            &#10;            assertInstanceOf(IProcessadorDados.class, processador);&#10;            assertNotNull(processador.executar());&#10;            assertNotNull(processador.cancelar());&#10;            assertTrue(processador.executar().contains(&quot;efetivado&quot;));&#10;            assertTrue(processador.cancelar().contains(&quot;cancelado&quot;));&#10;        }&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Deve criar instâncias independentes&quot;)&#10;    void deveCriarInstanciasIndependentes() {&#10;        IProcessadorDados json1 = ProcessadorDadosFactory.obterProcessador(&quot;JSON&quot;);&#10;        IProcessadorDados json2 = ProcessadorDadosFactory.obterProcessador(&quot;JSON&quot;);&#10;        &#10;        assertNotSame(json1, json2, &quot;Factory deve criar instâncias independentes&quot;);&#10;        assertEquals(json1.getClass(), json2.getClass());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>